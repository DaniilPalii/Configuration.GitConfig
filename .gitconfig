[alias]
	aa = add --all
	b = branch
	c = switch --create
	d = diff
	e = edit-global-config
	f = fetch
	fa = fetch --all
	fw = fresh-whatsup
	i = interactive-rebase
	k = commit --message
	l = log-branch
	g = graph
	ga = graph
	pul = pull
	pus = push --force-with-lease
	r = fmrebase
	s = status
	w = whatsup
	amend = commit --amend --no-edit
	checkout-fresh-dev = ! git checkout $(git dev-branch) && git pull
	create-fresh-branch = ! git checkout-fresh-dev && git checkout --branch
	current-branch = rev-parse --abbrev-ref HEAD
	clean-all = clean -d
	dev-branch = config custom.devbranch
	edit-global-config = config --edit --global
	edit-local-config = config --edit
	delete-remote-branch = push origin -d
	describe-branch = log-branch-verbose ${1:-head} --oneline --pretty='%s'
	finish-branch = ! branchToDelete=$(git current-branch) && git checkout $(git dev-branch) && git pull && git branch -d $branchToDelete && git push origin --delete $branchToDelete
	finish-branch-force = ! branchToDelete=$(git current-branch) && git checkout $(git dev-branch) && git pull && git branch -D $branchToDelete && git push origin --delete $branchToDelete
	finish-branch-locally = ! branchToDelete=$(git current-branch) && git checkout $(git dev-branch) && git pull && git branch -d $branchToDelete
	finish-branch-locally-force = ! branchToDelete=$(git current-branch) && git checkout $(git dev-branch) && git pull && git branch -D $branchToDelete
	fmrebase = ! git fetch --all && git rebase origin/$(git dev-branch)
	fmrebase-overwriting = ! git fetch --all && git rebase origin/$(git dev-branch) --strategy ours
	fmrebase-interactive = ! git fetch --all && git rebase -i origin/$(git dev-branch)
	graph = log --graph --pretty='%C(dim yellow)%h %C(no-dim blue)%aN %Creset%s%C(auto)%d %C(dim cyan)%ad' --date=relative
	graph-all = graph --all
	ignore-locally = update-index --assume-unchanged
	last-commit-comment = log -1 --pretty=%B
	log-branch = ! git log-branch-verbose ${1:-head} --oneline --pretty='%C(dim yellow)%h %Creset– %C(no-dim blue)%aN %Creset– %Creset%s%C(auto)%d %Creset– %C(dim cyan)%ad' --date=relative
	log-branch-verbose = ! git log origin/$(git dev-branch)..${1:-head}
	log-short = log --oneline --graph -15
	prepare-to-mr = ! git fmrebase && git push --force-with-lease
	prepare-to-mr-interactive = ! git fmrebase-interactive && git push --force-with-lease
	publish = ! git push --set-upstream origin $(git current-branch)
	interactive-rebase = ! git rebase --interactive $(git merge-base --fork-point origin/$(git dev-branch))
	refresh-mr = ! git commit --amend --no-edit && git push --force-with-lease
	rename = commit --amend
	remove-changes = ! git reset --hard && git clean-all
	remove-ignored = clean-all -x
	remove-trash = remove-ignored
	reset-hard-fetching = ! git fetch --all && git clean-all && git reset --hard origin/$(git dev-branch)
	temp = ! git add --all && git commit --all --message "temp" && git push
	set-npp-as-editor = config --global core.editor "'C:/Program Files/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin"
	set-vscode-as-editor = config --global core.editor "code --new-window --wait"
	should-rebase = ! git merge-base --is-ancestor origin/$(git dev-branch) HEAD && ECHO No || ECHO Yes
	should-rebase-fetching = ! git fetch --all --quiet && git should-rebase
	show-ignored-locally = ! git ls-files -v | grep ^[[:lower:]]
	undo-commit = ! git log -1 && git reset head~1
	undo-commit-hard = ! git log -1 && git reset --hard head~1
	unignore-locally = update-index --no-assume-unchanged
	unstage = restore --staged
	url = cofig --get remote.origin.url
	whatsup = ! git status && echo '\nBranch log:' && git log-branch
	fresh-whatsup = ! git fetch --all && git whatsup && echo '\nShould rebase: ' && echo $(git should-rebase)
[core]
	editor = code --wait
	quotepath = off
	ignorecase = false
	autocrlf = true
	commentChar = auto
	longpaths = true
[diff]
	tool = vsdiffmerge
	guitool = vsdiffmerge
[difftool]
	prompt = true
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[difftool "vsdiffmerge"]
	cmd = \"\" \"$LOCAL\" \"$REMOTE\"
	keepBackup = false
[fetch]
	prune = true
[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true
[merge]
	tool = vsdiffmerge
	autoStash = true
[mergetool]
	prompt = true
[mergetool "vscode"]
	cmd = code --wait $MERGED
[mergetool "vsdiffmerge"]
	cmd = \"C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/Common7/IDE/CommonExtensions/Microsoft/TeamFoundation/Team Explorer/vsdiffmerge.exe\" \"$REMOTE\" \"$LOCAL\" \"$BASE\" \"$MERGED\" //m
	keepBackup = false
	trustExitCode = true
[pull]
	rebase = true
[push]
	default = current
[rebase]
	autoStash = true
[color]
	ui = true
[difftool "sourcetree"]
	cmd = '' \"$LOCAL\" \"$REMOTE\"
[mergetool "sourcetree"]
	cmd = "'' "
	trustExitCode = true
[init]
	defaultBranch = main
[custom]
	devbranch = main
[clean]
	requireForce = false
[commit]
	status = false
